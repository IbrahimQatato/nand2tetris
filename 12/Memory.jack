// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static array ram, heap, freelist;

    /** Initializes the class. */
    function void init() {
    	let ram = 0;
    	let heap = 2048;
    	let freelist = 2048;
    	let heap[0] = 0;
    	let heap[1] = 14335;
    	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
    	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    	let ram[address] = value;
    	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    	var Array pointer, currNode;
    	var boolean found;
    	let found = false;
    	let currNode = freelist;
    	while(~found){
    		if (~(currNode[1]<(size+2))){
    			let pointer = (currNode[1]+currNode)-(size+2);
    			let currNode[1] = currNode[1]-(size+2);
    			let pointer[1] = size;
    			return pointer+2;
    		}else{
    			let currNode = currNode[0];
    		}
    	}
    	return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    	var Array currNode;
    	let currNode = freelist;
    	let o = o-2;
    	while (~currNode[0]=0){
    		let currNode = currNode[0];
    	}
    	let currNode[0] = o;
    	let o[0] = 0;
    	return;
    }    
}
