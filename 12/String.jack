// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	if(maxLength=0){
    		let maxLength = 1;
    	}
    	let str = Array.new(maxLength);
    	let length = 0;
    	return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	do str.dispose();
    	do Memory.deAlloc(this);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
    	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	let str[j] = c;
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	
    	let str[length] = c;
    	let length = length+1;
   		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	let length = length-1;
   		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int i, val, d;
    	var boolean minus;
    	let minus = false;
    	let val = 0;
    	let i = 0;
    	if(str[i]=45){
    		let i = i+1;
    		let minus = true;
    	}
    	while((i<length)&~(str[i]<48)&~(str[i]>57)){
    		let d = str[i]-48;
    		let val = (val*10)+d;
    		let i = i+1;
    	}
    	if(minus){
    		return -val;
    	}
    	return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	let length = 0;
    	if(val<0){
    		do appendChar(45);
    		let val = -val;
    	}
    	do int2String(val);
    	return;
    }

    method void int2String(int val){
    	var char c;
    	let c = (val-((val/10)*10))+48;
    	if(val<10){
    		//let length = 0;
    		do appendChar(c);
    	}else{
    		do int2String(val/10);
    		do appendChar(c);
    	}
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34;
    }
}
