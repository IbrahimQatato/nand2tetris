<class>
<keyword> class </keyword>
class: <identifier> Main </identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
subroutine: <identifier> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
class: <identifier> Array </identifier>
var (def)--index--> 0<identifier> a </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
var (def)--index--> 1<identifier> length </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
var (def)--index--> 2<identifier> i </identifier>
<symbol> , </symbol>
var (def)--index--> 3<identifier> sum </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
var --index--> 1type-----int<identifier> length </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
--------class<symbol> . </symbol>
<identifier> readInt </identifier>
subroutine: <symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> How many numbers?  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
var --index--> 0type-----Array<identifier> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Array </identifier>
--------class<symbol> . </symbol>
<identifier> new </identifier>
subroutine: <symbol> ( </symbol>
<expressionList>
<expression>
<term>
var --index--> 1<identifier> length </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
var --index--> 2type-----int<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
var --index--> 2<identifier> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
var --index--> 1<identifier> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
var --index--> 0type-----Array<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
var --index--> 2<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard </identifier>
--------class<symbol> . </symbol>
<identifier> readInt </identifier>
subroutine: <symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Enter a number:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
var --index--> 3type-----int<identifier> sum </identifier>
<symbol> = </symbol>
<expression>
<term>
var --index--> 3<identifier> sum </identifier>
</term>
<symbol> + </symbol>
<term>
var --index--> 0<identifier> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
var --index--> 2<identifier> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
var --index--> 2type-----int<identifier> i </identifier>
<symbol> = </symbol>
<expression>
<term>
var --index--> 2<identifier> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
------class<symbol> . </symbol>
subroutine: <identifier> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> The average is  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output </identifier>
------class<symbol> . </symbol>
subroutine: <identifier> printInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
var --index--> 3<identifier> sum </identifier>
</term>
<symbol> / </symbol>
<term>
var --index--> 1<identifier> length </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
